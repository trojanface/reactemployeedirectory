{"version":3,"sources":["components/EmployeeCard.js","components/Wrapper.js","utils/API.js","components/Navbar.js","utils/EmployeeFuncs.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","className","src","this","props","image","alt","name","first","last","contact","address","street","number","city","postcode","Component","Wrapper","children","axios","get","navbar","onSubmit","searchEmployees","value","searchVal","onChange","changeVal","type","placeholder","aria-label","searchToggle","ABCSort","empArray","alphaToggle","newArray","sort","a","b","employeeArray","alphabetToggle","EmpSearch","event","fullEmployeeArray","preventDefault","filter","str","toLowerCase","indexOf","Body","state","queryAPI","API","then","res","setState","data","results","catch","err","console","log","alphabeticalSort","target","Navbar","onClick","map","picture","cell","location","id","thumbnail","key","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d6cff9c6.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass EmployeeCard extends Component {\r\n    \r\n    render() {//renders with props passed from body.js\r\n      \r\n        return (\r\n            <div className=\"card mb-1\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-1\">\r\n                   <img src={this.props.image} className=\"card-img-left\" alt=\"...\"/>\r\n               </div>\r\n               <div className=\"col-md-3 my-auto\">\r\n                   <h5>Name: {`${this.props.name.first} ${this.props.name.last}`}</h5>\r\n               </div>\r\n               <div className=\"col-md-3 my-auto\">\r\n                   <h5>Contact: {`${this.props.contact}`}</h5>\r\n               </div>\r\n               <div className=\"col-md-5 my-auto\">\r\n                   <h5>Address: {`${this.props.address.street.number} ${this.props.address.street.name}, ${this.props.address.city}, ${this.props.address.postcode}`}</h5>\r\n               </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmployeeCard","import React from \"react\";\r\n\r\nfunction Wrapper(props) {//centers all content in middle of page.\r\n  return <div className=\"container\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import axios from \"axios\";\r\n\r\n\r\n\r\n\r\nexport default {\r\n  getEmployees: function() { //contacts randomuser API and retrieves 20 results from Australia\r\n    return axios.get(\"https://randomuser.me/api/?results=20&nat=au\");\r\n  }\r\n};\r\n","import React, { Component } from 'react'\r\n\r\nclass navbar extends Component {\r\n\r\n\r\n\r\n    render() {//renders with props passed from body.js\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-light bg-light\">\r\n                    <span className=\"navbar-brand mb-0 h1\">Employee Directory</span>\r\n                    <form onSubmit={this.props.searchEmployees} className=\"form-inline my-2 my-lg-0\">\r\n                        <input value={this.props.searchVal} onChange={this.props.changeVal} className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search Names\" aria-label=\"Search\" />\r\n        <button   className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">{this.props.searchToggle ? \"Reset\" : \"Search\"}</button>\r\n                    </form>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default navbar\r\n","export const ABCSort = (empArray, alphaToggle) => {//exports the ABC sort function\r\n        let newArray = empArray.sort((a, b) => {//creates a new array and stores the sorted array within it\r\n            if (alphaToggle === false) {//checks toggle to see if sorting in ascending or descending order\r\n            if (a.name.first < b.name.first) { return -1; }\r\n            if (a.name.first > b.name.first) { return 1; }\r\n            } else {\r\n                if (a.name.first > b.name.first) { return -1; }\r\n                if (a.name.first < b.name.first) { return 1; }\r\n            }\r\n            return 0;\r\n        })\r\n    \r\n    if (alphaToggle === false) {//returns object to update states with in body.js and resets the toggle\r\n        return {employeeArray : newArray, alphabetToggle: true};\r\n    } else {\r\n       return {employeeArray : newArray, alphabetToggle: false};\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const EmpSearch = (event, searchToggle, searchVal, employeeArray, fullEmployeeArray) => {//exports the search function\r\n    event.preventDefault();//prevents page reloading\r\n    if (searchToggle === false) {//checks if search currently exists\r\n   const employees = employeeArray.filter((str)=> { //creates a new array from the old one with elements that match the criteria\r\n       let fullname = `${str.name.first} ${str.name.last}`.toLowerCase()//converts the name to a full name and changes it to lower case\r\n       return fullname.indexOf(searchVal.toLowerCase()) >= 0; //returns the element to the new array only if it has some of the searched values within it\r\n   });\r\n   return { employeeArray : employees, searchToggle : true };//returns an object to reset the new state with\r\n} else { //if search exists then it returns the employee list back to the full unfiltered list\r\n   return { employeeArray : fullEmployeeArray, searchToggle : false };\r\n}\r\n\r\n }\r\n\r\n","import React, { Component } from 'react' //imports react and components from package\r\nimport EmployeeCard from './EmployeeCard'; //imports employee card component\r\nimport Wrapper from './Wrapper'; //imports wrapper component\r\nimport API from \"../utils/API\" //imports API utility\r\nimport Navbar from './Navbar'; //imports navbar component\r\nimport { ABCSort, EmpSearch } from \"../utils/EmployeeFuncs\"; //imports sort and search utilities\r\n\r\nclass Body extends Component {\r\n    state = { //sets the state variables\r\n        employeeArray: [],\r\n        alphabetToggle: false,\r\n        fullEmployeeArray: [],\r\n        searchVal: \"\",\r\n        searchToggle: false\r\n    }\r\n\r\n    componentDidMount() {//upon first render query the api\r\n        this.queryAPI();\r\n    }\r\n\r\n    queryAPI = () => {\r\n        API.getEmployees()\r\n            .then(res => {\r\n                this.setState({ employeeArray: res.data.results, fullEmployeeArray: res.data.results })//set state variables with api results\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    searchEmployees = (event) => {//uses imported search function to search employees\r\n        this.setState(EmpSearch(event, this.state.searchToggle, this.state.searchVal, this.state.employeeArray, this.state.fullEmployeeArray));\r\n    }\r\n\r\n\r\n\r\n    alphabeticalSort = () => {//uses imported sort function to sort employees\r\n        this.setState(ABCSort(this.state.employeeArray, this.state.alphabetToggle));\r\n    }\r\n\r\n    changeVal = (event) => {//handles value changes on search input box\r\n        this.setState({ searchVal: event.target.value })\r\n    }\r\n\r\n    render() {//renders the components and passes props\r\n        return (\r\n            <>\r\n                <Navbar searchToggle={this.state.searchToggle} searchEmployees={this.searchEmployees} changeVal={this.changeVal} searchVal={this.state.searchVal} />\r\n                <Wrapper>\r\n\r\n                    <div className=\"card\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-1 my-auto\">\r\n                            </div>\r\n                            <div className=\"col-md-3 my-auto\">\r\n                                <h5 onClick={this.alphabeticalSort}>Name {this.state.alphabetToggle ? <i className=\"fas fa-arrow-down\"></i> : <i className=\"fas fa-arrow-up\"></i>}</h5>\r\n                            </div>\r\n                            <div className=\"col-md-3 my-auto\">\r\n                                <h5>Contact</h5>\r\n                            </div>\r\n                            <div className=\"col-md-5 my-auto\">\r\n                                <h5>Address</h5>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {this.state.employeeArray.map(({ picture, name, cell, location, id }) => (\r\n                        <EmployeeCard image={picture.thumbnail} name={name} contact={cell} address={location} key={id.value} />\r\n                    ))}\r\n                </Wrapper>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Body\r\n","import React from 'react'; //imports react\nimport './App.css'; //imports styling\nimport Body from \"./components/Body\"; //imports the main component\n\nfunction App() {\n  return (\n    <div>\n      <Body />\n    </div>\n  );\n}\n\nexport default App; //exports app to the index.js file where its rendered into index.html\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}